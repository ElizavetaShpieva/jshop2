
;;; ------------------------------------------------------------------------
;;; Declare all the data
;;; ------------------------------------------------------------------------

(defdomain test_bring
  (
    ;; basic block-stacking operators

    (:operator (!pickup ?a)
               ((on ?a ?loc))
               ((wrong_loc ?a) (on ?a ?loc))
               ((holding ?a) (has robot ?a)))

    (:operator (!putdown ?b)
               ()
               ((holding ?b))
               ((on-table ?b)))

    (:operator (!put ?b)
               ((container ?loc))
               ((holding ?b)(has robot ?b))
               ((in ?b ?loc)))

    (:operator (!place ?b)
               ((plane ?loc))
               ((holding ?b)(has robot ?b))
               ((on ?b ?loc)))

    (:operator (!hand_over ?b)
               ((person ?loc))
               ((holding ?b)(has robot ?b))
               ((has ?b ?loc)))


    (:operator (!putdown ?b ?loc)
               ()
               ((holding ?b) (has robot ?b))
               ((on ?b ?loc)))

    (:operator (!put-on-tray ?b)
               ((on ?a ?loc))
               ((wrong_loc ?b) (on ?b ?loc))
               ((on-tray ?b) (has robot ?b)))               

    (:operator (!detect_objects ?loc)
               ((at robot ?loc))
               ()
               ((objects-detected ?loc)))

    (:operator (!go_to ?loc)
               ((at robot ?to-loc))
               ((at robot ?to-loc))
               ((at robot ?loc)))

    (:operator (!to-detect-pose ?robot) 
               ()
               ()
               ((detect-pose ?robot)))

    (:operator (!approach ?a)
                ()
                ()
                ((manipulator ready)))
    (:operator (!open ?a)
                ((manipulator read))
                ((closed ?a))
                ((opened ?a)))

    (:operator (!close ?a)
                ((opened ?a))
                ((opened ?a))
                ((closed ?a)))

    ;; book-keeping methods & ops, to keep track of what needs to be done
    (:operator (!!assert ?g)
               ()
               ()
               (?g)
               ;; Since !!ASSERT isn't a real blocks-world operator, make its cost 0
               0)

    (:operator (!!remove ?g)
               ()
               (?g)
               ()
               ;; Since !!REMOVE isn't a real blocks-world operator, make its cost 0
               )

    ;; The method for the top-layer task
    (:method (achieve-goals ?goals)
             ()
             ((assert-goals ?goals)
             (find-nomove) (add-new-goals) (find-movable) (move-block)))

    (:method (assert-goals (?goal . ?goals))
             ()
             ((!!assert (goal ?goal))
              (assert-goals ?goals)))

    (:method (assert-goals nil)
             ()
             ())

    (:method (find-nomove ?loc)
             ((object ?o) (location ?loc) (not (dont-move ?o)) (belongs ?o ?loc) (on ?o ?loc))
             ((!!assert (dont-move ?o)) (find-nomove ?loc))
             nil
             nil)



    (:method (find-movable ?loc)
             ((object ?o) (not (dont-move ?o)) (not (belongs ?o ?loc)) (on ?o ?loc)
              (not (wrong_loc ?o)))
             ; Decomposition
             ((!!assert (wrong_loc ?o)) (find-movable ?loc))


             nil
             nil)


(:operator (!visit ?waypoint)
  ()
  ()
  ((visited ?waypoint)))

(:operator (!unvisit ?waypoint)
  ()
  ((visited ?waypoint))
  ())

(:method (go_to robot ?to)
  ((at robot ?from))
  ((!visit ?from)
     (go_to robot ?from ?to)
     (!unvisit ?from))
)

(:method (go_to robot ?from ?to)
Case1    ((at robot ?to))
         ()
Case2    ((close-by robot ?room ?from ?to) (room ?room)
         )
         ((!go_to ?to))
Case3    ((location ?mid) (room ?room)
          (close-by robot ?room ?from ?mid)
          (not (visited ?mid))
         )
         ((!go_to ?mid) (!visit ?mid) (go_to robot ?mid ?to) (!unvisit ?mid))
)

;----------------------------------------------
  

    (:method (clean_up  ?droom)
      ((room ?croom)  (room ?droom) (location ?from) (location ?to) (in ?droom ?to) (connect ?droom ?croom) (in ?croom ?from) (at robot ?from))
      ((!go_to ?to) (clean_up ?droom))

      ((in ?droom ?to) (at robot ?to))
      ((explore ?droom))

      nil
      nil
    )


    (:method (explore  ?room)
      ((in ?room ?from) (at robot ?from) (close-by robot ?room ?from ?to)(not (visited ?from)))
      ((tidy_up ?from) (!visit ?from) (!go_to ?to) (explore  ?room) (!unvisit ?from))


      nil
      nil
    )


    (:method (tidy_up ?loc)

             ((location ?loc) (not (at robot ?loc)) (not (has robot ?o))(wrong_loc ?o))
             ((!go_to ?loc) (tidy_up ?loc))

<<<<<<< HEAD
            ((location ?loc) (at robot ?loc) (not (has robot ?o)) (not (wrong_loc ?o)) (objects-detected ?loc))
            ((find-nomove ?loc) (find-movable ?loc) (tidy_up ?loc))
=======
             ((location ?loc) (at robot ?loc) (not (has robot ?o)) (not (wrong_loc ?o)) (not (dont-move ?o)) (objects-detected ?loc))
             ((find-nomove ?loc) (find-movable ?loc) (tidy_up ?loc))
>>>>>>> 1ea0d2af9ce15cf42f41b62d596ff63f51bd7c7d


            ((object ?o) (location ?loc) (location ?to-loc) (wrong_loc ?o) (belongs ?o ?to-loc) (not (on ?o ?to-loc)) (not (at robot ?to-loc)) (at robot ?loc) (not (has robot ?o)) (objects-detected ?loc))
            ((bring ?o ?to-loc) (tidy_up ?loc))

            ((object ?o) (location ?loc) (location ?to-loc) (wrong_loc ?o) (belongs ?o ?to-loc) (not (on ?o ?to-loc)) (not (at robot ?to-loc)) (at robot ?loc) (not (has robot ?o)) (objects-detected ?loc) (or (has robot tray) (has external-tray) ))
            ((bring_objects ?to-loc) (tidy_up ?loc))

             ((object ?o) (location ?loc) (at robot ?loc) (not (has robot ?o)) (not(objects-detected ?loc)))
             ((!detect_objects ?loc))

             nil
             nil
             )


    (:method (bring_objects ?to-loc)

             ((object ?o) (location ?loc)  (location ?to-loc) (on ?o ?loc))
             ((bring_objects ?loc ?to-loc))
               
               nil
               nil
              )



    (:method (bring_objects ?loc ?to-loc)
             ((object ?o) (location ?loc) (location ?to-loc) (on ?o ?loc) (not (has robot ?o)))
             ((get ?o ?loc)(bring ?o ?loc ?to-loc))

             ((object ?o)  (location ?loc) (location ?to-loc) (not (on ?o ?loc)) (has robot ?o))
             ((carry ?o ?to-loc))

             nil
             nil
             )




    (:method (bring ?o ?to-loc)

             ((object ?o) (location ?loc)  (location ?to-loc) (on ?o ?loc))
             ((bring ?o ?loc ?to-loc))
               
               nil
               nil
              )


    (:method (bring ?o ?loc ?to-loc)
             ((object ?o) (location ?loc) (location ?to-loc) (on ?o ?loc) (not (has robot ?o)))
             ((get ?o ?loc)(bring ?o ?loc ?to-loc))

             ((object ?o)  (location ?loc) (location ?to-loc) (not (on ?o ?loc)) (has robot ?o))
             ((carry ?o ?to-loc))

             nil
             nil
             )

    (:method (get ?o ?loc)
             ((location ?loc) (not (at robot ?loc)) (not (has robot ?o)))
             ((!go_to ?loc) (get ?o ?loc))

              ;; inside , closed door (within robot ?room) 
              ((object ?o) (haspart ?loc ?cdoor) (closed ?loc) (inside ?o ?loc) (at robot ?loc) (cdoor ?cdoor) (not (has robot ?o)))
              ((!approach ?cdoor) (!open ?cdoor) (get ?o) (get ?o ?loc))

              ((object ?o) (haspart ?loc ?cdoor) (opened ?loc) (at robot ?loc) (cdoor ?cdoor)  (has robot ?o) (on-tray ?o))
              ((!close ?cdoor))

             ((object ?o) (location ?loc) (not (has robot ?o)))
             ((get ?o))

             nil
             nil)

    (:method (get ?o)

             ((object ?o) (not (has robot ?o)) (on ?o ?loc) (not(objects-detected ?loc)))
             ((detect ?o) (get ?o))

             ((object ?o) (not (has robot ?o)) (on ?o ?loc) (not (holding ?o)))
             ((grasp ?o))

             nil
             nil)

    (:method (detect ?o)


             ((object ?o) (not (has robot tray)) (not (has robot ?o)) (not (holding ?o)) (detect-pose ?robot))
             ((!detect ?o))

             ((object ?o) (not (has robot ?o))(not (holding ?o)))
             ((!to-detect-pose ?robot) (detect ?o))

             nil
             nil)

    (:method (grasp ?o)
         

             ;;Parameters for grasping
             ;; ON -  on plane
             ((object ?o) (not (has robot tray)) (not (has robot ?o)) (on ?o ?loc) (plane ?loc) (not (holding ?o)))
             ((!pickup ?o)) 
             ;; INSIDE - inside of cupboard
             ((object ?o) (not (has robot tray)) (not (has robot ?o)) (on ?o ?loc) (cupboard ?loc) (not (holding ?o)))
             ((!pickup ?o)) 
             ;; IN - in container
             ((object ?o) (not (has robot tray)) (not (has robot ?o)) (on ?o ?loc) (container ?loc) (not (holding ?o)))
             ((!pickup ?o)) 


             ((object ?o) (location ?loc) (location ?to-loc) (has robot tray) (not (has robot ?o)) (not (on-tray ?o)))
             ((!put-on-tray ?o))

             nil
             nil)


    (:method (carry ?o ?loc)
             ((location ?loc) (not (at robot ?loc)) (has robot ?o))
             ((!go_to ?loc) (carry ?o ?loc))


             ((object ?o) (location ?loc) (at robot ?loc) (has robot ?o))
             ((take_to ?o))

             nil
             nil)

    (:method (take_to ?o)
            ;;Parameters for delivering
            ;;ON - on plane
             ((object ?o) (location ?loc) (at robot ?loc) (has robot ?o) (or (plane ?loc) (drink ?o)))
             ((!place ?o))            
            ;;IN - in container
             ((object ?o) (location ?loc) (at robot ?loc) (has robot ?o) (or (container ?loc) (trash ?o)))
             ((!put ?o))
            ;;TO - to person
             ((object ?o) (location ?loc) (at robot ?loc) (has robot ?o) (person ?loc))
             ((!hand_over ?o))
             
             nil
             nil)


  )
)
